# Phaser Snippets

# Desktop game variable
snippet gamedesktop
	var game;
	window.onload = function()
	{
		game=new Phaser.Game(480,640,Phaser.AUTO,"ph_game");

		game.state.add("StateMain",StateMain);
		game.state.start("StateMain");
	}
# Desktop/Mobile game variable
snippet gamedesktopmobile
	var game;
	var useLandscape = false;
	var soundOn = true;

	window.onload = function () {
		var isMobile=navigator.userAgent.indexOf("Mobile");

		if (isMobile>-1) {
			isMobile=true;
		} else {
			isMobile=false;
		}

		if (isMobile==false) {
			//desktop laptop
			if (useLandscape == true) {
				game = new Phaser.Game(${1:640}, ${2:480}, Phaser.AUTO, "ph_game");
			} else {
				game = new Phaser.Game(${3:480}, ${4:640}, Phaser.AUTO, "ph_game");
			}
		} else {
			//mobile device
			game = new Phaser.Game(window.innerWidth, window.innerHeight, Phaser.AUTO, "ph_game");
		}

		game.state.add("StateMain",StateMain);
		game.state.start("StateMain");
	}

# Blank State
snippet blankstate
	var ${1:StateMain} = {
		preload: function() {
			// load images into library
		},

		create: function() {
			// set up objects, variables
			// sounds, text
			// good guys, explosions
		},

		update: function() {
			// constant running loop
		}
	}

# Add State
snippet addstate
	game.state.add("${1:StateMain}", ${2:StateMain});

# Start State
snippet startstate
	game.state.start("${1:state_name}");

# Add Image
snippet addimg
	game.add.image(${1:x}, ${2:y}, "${3:image_name}");

# Load Image
snippet loadimg
	game.load.image("${1:image_name}", "${2:image_path}");

# Add Sprite
snippet addsprite
	this.${1:char1} = game.add.sprite(${2:x}, ${3:y}, "${4:library_key}");

# Load Sprite
snippet loadsprite
	game.load.spritesheet('${1:ref_name}', '${2:pathto.png}', ${3:sprite_width}, ${4:sprite_height}, ${5:number_of_cells});

# Add Tilesprite
snippet addtilesprite
	 this.${1:tileSprite} = game.add.tileSprite(${2:x}, ${3:y}, ${4:width}, ${5:height}, '${6:key}');

# Enable Sprite
snippet enablesprite
	${1:spriteName}.inputEnabled = true;

# Add Sprite Input Up
snippet inputup
	${1:sprite_name}.events.onInputUp.add(this.${2:click_handler}, ${3:scope});

# Add Sprite Input Down
snippet inputdown
	${1:sprite_name}.events.onInputDown.add(this.${2:click_handler}, ${3:scope});

# Force Orientation
snippet forceorientation
	game.scale.forceOrientation(${1:landscape}, ${2:portrait});

# Enter Incorrect Orientation
snippet enterincorrectorientation
	game.scale.enterIncorrectOrientation.add(${1:function}, ${2:scope});

# Leave Incorrect Orientation
snippet leaveincorrectorientation
	game.scale.leaveIncorrectOrientation.add(${1:function}, ${2:scope});

# Add Button
snippet addbtn
	var ${1:button_name} = game.add.button(${2:x}, ${3:y}, "${4:imageKey}", ${5:clickFunction}, ${6:this}, ${7:over_frame}, ${8:normal_frame}, ${9:down_frame});

# Add Canvas click
snippet canvasclick
	 game.input.onUp.add(${1:functionName}, ${2:scope});

# Generate random number
snippet randnum
	game.rnd.integerInRange(${1:min}, ${2:max});

# Add Text
snippet addtext
	${1:myText} = game.add.text(${2:x}, ${3:y}, "${4:text}");

# Load Audio
snippet loadaudio
	game.load.audio("${1:key}", "${2:path}");

# Add Audio
snippet addaudio
	${1:myAudio} = game.add.audio("${2:key}");

# Add Animation
snippet addanim
	${1:mysprite}.animations.add('${2:animation_name}', ${3:frame_array}, ${4:frames_sec}, ${5:loopBoolean});

# Play Animation
snippet playanim
	${1:mysprite}.animations.play('${2:animation_name}');

# Enable Physics
snippet enablephysics
	game.physics.enable(this.${1:sprite}, Phaser.Physics.${2:ARCADE});

# Active Pointer is Down
snippet pointerdown
	game.input.activePointer.isDown

# Add Time event
snippet addtime
	game.time.events.add(Phaser.Timer.SECOND, ${1:function}, ${2:this});

# Loop Time
snippet looptime
	game.time.events.loop(Phaser.Timer.SECOND, ${1:function}, ${2:this});

# Collide
snippet collide
	game.physics.arcade.collide(this.${1:sprite1}, this.${2:sprite2}, ${3:null}, this.${4:action_function}, ${5:this});

# Collide layer
snippet collidelayer
	game.physics.arcade.collide(this.${1:sprite}, this.${2:layer});

# Collide world bounds
snippet collideworldbounds
	this.${1:sprite}.body.collideWorldBounds = ${2:true};

# Anchor
snippet anchor
	this.${1:object_name}.anchor.set(${2:x}, ${3:y});

# Fancy Font
snippet fancyfont
	this.${1:titleText} = game.add.text(${2:x}, ${3:y}, "${4:text}", { font: "${5:size} ${6:fontName}", fill: "${7:color}", stroke: "${8:color}", strokeThickness: ${9:number}, align: "${10:string}" });

# Load tilemap
snippet loadtilemap
	game.load.tilemap("${1:map}", "${2:map_image_path}", ${3:null}, Phaser.Tilemap.${4:TILED_JSON});

# Add tilemap
snippet addtilemap
	this.${1:map} = game.add.tilemap("${2:map}");

# Add tilesetimage
snippet addtilesetimg
	this.${1:tileset}.addTilesetImage("${2:tiles}");

# Create layer
snippet createlayer
	this.${1:layer} = this.map.createLayer("${2:layer_title}");

# Map set collision
snippet mapsetcollision
	this.${1:map}.setCollisionBetween(${2:first_tile}, ${3:last_tile});

# Camera follow
snippet camerafollow
	game.camera.follow(this.${1:sprite});

# Create Cursor Keys
snippet createcursorkeys
	${1:cursors} = game.input.keyboard.createCursorKeys();

# Cursor left is down
snippet leftisdown
	${1:cursors}.left.isDown

# Cursor up is down
snippet upisdown
	${1:cursors}.up.isDown

# Cursor right is down
snippet rightisdown
	${1:cursors}.right.isDown

# Cursor down is down
snippet downisdown
	${1:cursors}.down.isDown

# Body on Floor
snippet onfloor
	this.${1:sprite}.body.onFloor()
# Velocity X
snippet velocityx
	this.${1:sprite}.body.velocity.x

# Velocity Y
snippet velocityy
	this.${1:sprite}.body.velocity.y

# Set X Velocity
snippet velocityx=
	this.${1:sprite}.body.velocity.x = ${2:velocity};

# Set Y Velocity
snippet velocityy=
	this.${1:sprite}.body.velocity.y = ${2:velocity};

# Scale X
snippet scalex
	this.${1:sprite}.scale.x;

# Scale X=
snippet scalex=
	this.${1:sprite}.scale.x = ${2:scale};

# Scale Y
snippet scaley
	this.${1:sprite}.scale.y

# Scale y=
snippet scaley=
	this.${1:sprite}.scale.y = ${2:scale};

# Math absolute number
snippet abs
	Math.abs(${1:number});

# Set tile index callback
snippet tileindexcallback
	this.${1:map}.setTileIndexCallback(${2:tile_number}, ${3:func}, ${4:this});

# Remove tile
snippet removetile
	this.${1:map}.removeTile(${2:tile}.x, ${3:tile}.y, this.${4:layer});
